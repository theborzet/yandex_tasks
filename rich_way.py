# 3. Вывести маршрут максимальной стоимости
# легкаяdynamic programming 2D
# В левом верхнем углу прямоугольной таблицы размером N×M находится черепашка. 
# В каждой клетке таблицы записано некоторое число. Черепашка может перемещаться вправо или вниз, 
# при этом маршрут черепашки заканчивается в правом нижнем углу таблицы.

# Подсчитаем сумму чисел, записанных в клетках, через которую проползла черепашка (включая начальную и конечную клетку). Найдите наибольшее возможное значение этой суммы и маршрут, на котором достигается эта сумма.

# Формат ввода
# В первой строке входных данных записаны два натуральных числа N и M, не превосходящих 100 — размеры таблицы. Далее идет N строк, каждая из которых содержит M чисел, разделенных пробелами — описание таблицы. Все числа в клетках таблицы целые и могут принимать значения от 0 до 100.

# Формат вывода
# Первая строка выходных данных содержит максимальную возможную сумму, вторая — маршрут, на котором достигается эта сумма. Маршрут выводится в виде последовательности, которая должна содержать N-1 букву D, означающую передвижение вниз и M-1 букву R, означающую передвижение направо. Если таких последовательностей несколько, необходимо вывести ровно одну (любую) из них.

# Пример 1
# Ввод
# 5 5
# 9 9 9 9 9
# 3 0 0 0 0
# 9 9 9 9 9
# 6 6 6 6 8
# 9 9 9 9 9
# Вывод
# 74
# D D R R R R D D


def main():
    n, m = map(int, input().split())
    matrix = [list(map(int, input().split())) for _ in range(n)]

    ans = [[0] * m for _ in range(n)]
    ans[0][0] = matrix[0][0]

    for i in range(1, n):
        ans[i][0] = ans[i-1][0] + matrix[i][0]

    for j in range(1, m):
        ans[0][j] = ans[0][j-1] + matrix[0][j]

    for i in range(1, n):
        for j in range(1, m):
            ans[i][j] = max(ans[i-1][j], ans[i][j-1]) + matrix[i][j]

    i, j = n - 1, m - 1 
    res = []

    while i > 0 or j > 0:
        if i > 0 and j > 0:
            if ans[i-1][j] > ans[i][j-1]:
                res.append('D')
                i -= 1
            else:
                res.append('R')
                j -= 1
        elif i > 0:
            res.append('D')
            i -= 1
        elif j > 0:
            res.append('R')
            j -= 1

    print(ans[-1][-1])
    print(' '.join(res[::-1]))

if __name__ == '__main__':
    main()
